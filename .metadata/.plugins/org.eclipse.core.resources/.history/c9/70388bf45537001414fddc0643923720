package kmeans;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import util.DocUtils;
import util.FileFinder;

/**
 * This class is the data structure that represents the dictionary.
 * Methods for compute collection frequency and document frequency are included.
 * @author  Wang Donglu
 *
 */
public class Dictionary {
	
	public HashMap<String, Word> _ditc;
	
	public Dictionary(String directory, boolean ignore_stop_words){
		
		_ditc = new HashMap<String, Word>();
		ArrayList<File> files = FileFinder.GetAllFiles(directory, "", true);
		System.out.println("Found " + files.size() + " files.");
		
		int file_count = 0;
		for (File file : files) {
			String file_content = DocUtils.ReadFile(file);
			List<String> tokenList = MyDocUtil.normaliseToken(MyDocUtil.tokensFromString(file_content),ignore_stop_words);
			Set<String> uniqTokens = MyDocUtil.uniqTokens(tokenList);
			for(String token: tokenList){
				reviseColFreq(token);
			}
			for(String token: uniqTokens){
				reviseDocFreq(token);
			}
			if (++file_count % 500 == 0)
				System.out.println("Read " + file_count + " files.");
		}
		System.out.println("Extracted " + _ditc.size() + " unique tokens.");
	}
	
	private void reviseColFreq(String token){
		if(!_ditc.containsKey(token))
			_ditc.put(token, new Word(token));
		_ditc.get(token)._collectionFreq++;
	}
	
	private void reviseDocFreq(String token){
		if(!_ditc.containsKey(token))
			_ditc.put(token, new Word(token));
		_ditc.get(token)._docFreq++;
	}
	
	public String toStringByDocFreqDesc(){
		Collection<Word> words =  _ditc.values();
		Word[] sortedWords = words.toArray(new Word[0]);
		Arrays.sort(sortedWords,new WordComparatorByDocFreqDesc());
		
		StringBuilder sb = new StringBuilder();
		for (Word word : sortedWords) {
			sb.append("[document frequency: " + word._docFreq + ", collection frequency: " +word._collectionFreq+"] " + word._word +"\n");
		}
		return sb.toString();
		
	}

}
