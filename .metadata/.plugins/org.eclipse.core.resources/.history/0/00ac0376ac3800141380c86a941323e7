package KMeans;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.math.BigDecimal;

public class Document 
{
	int k;
	Double distance;
	Map<String, Double> tfIdfMap;
	
	// CONSTRUCTOR
	public Document(Map<String, Double> tfIdfMap)
	{
		this.tfIdfMap = tfIdfMap;
	}
	
	// SET
	public void setClusterID(int k)
	{
		this.k = k;
	}
	public void setDistance(Double distance)
	{
		this.distance = distance;
	}
	public void setTFIDFMap(Map<String, Double> tfIdfmap)
	{
		
	}

	//GET
	public int getClusterID()
	{
		return this.k;
	}
	public Double getDistance()
	{
		return this.distance;
	}
	public Map<String, Double> getWordFreqMap()
	{
		return this.tfIdfMap;
	}
	
	public static Map<String, Double> getTFMap (Map<String, Integer> wordFreqMap)
	{
		Map<String, Double> tfMap = new HashMap<String, Double>();
		int noOfTerms = wordFreqMap.size();

		for (Entry<String, Integer> word : wordFreqMap.entrySet() ) 
		{
			Double tf =  ((double) word.getValue()) / noOfTerms ;
			tfMap.put(word.getKey(), tf );
		}
		return tfMap;
	}
	
	public static Map<String, Double> getTFIDFMap (Map<String, Map>  bigFileDictionary, Map<String, Double> tfMap)
	{
		Map<String, Double> tfIdfMap = new HashMap<String, Double>();
		int noOfDocs = bigFileDictionary.size();
		
		for ( Entry<String, Double> word : tfMap.entrySet() ) 
		{
			String term  = word.getKey();
			Double tf    = word.getValue();
			Double idf   = Math.log((double) noOfDocs / Files2BigDictionary.allTermsMap.get(term).docFreq);
			Double tfidf = tf * idf;
			
			tfIdfMap.put(term, tfidf);
			
		}
		return tfIdfMap;	
	}
	
}
