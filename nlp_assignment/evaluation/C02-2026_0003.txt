Verb	Supertag	Verb semantics	Argument semantics
paid	A nx0Vnx1 A nx0Vnx1	transaction transaction transaction transaction	0=Customer 1=Amount
cost	A nx0Vnx2nx1		0=Item 1=Amount Implicit=Customer 0=Item 1=Amount 2=Customer 0=Customer 1=Item
cost	A nx0Vnx1		
bought, purchased			
socks	A NXN	none	none
Figure 1: Sample entries for a commercial transaction situation
In: I bought socks
Out: ((I) GF=0 AS=CUSTOMER TRANSACTION (socks) GF=1 AS=ITEM )
In:the pajamas cost my mother-in-law 12 dollars
Out: ( ( ( the ) pajamas ) GF=0 AS=ITEM TRANSACTION (( my ) mother-in-law ) GF=2 AS=CUSTOMER ( ( 12 ) dollars) GF=1 AS=AMOUNT )
In: the pajamas cost 12 dollars
Out: ( ( ( the ) pajamas ) GF=0 AS=ITEM TRANSACTION IMP:CUSTOMER (( 12 ) dollars ) GF=1 AS=AMOUNT )
Figure 2: Sample transductions generated by Parsli (“GF” for grammatical function, “AS” for argument semantics, “Imp” for implicit argument)
ways a daughter node of the root node, and the label on these nodes is not, linguistically speaking, part of the projection of the lexical item of that tree. For example, an adjective will project to AdjP, but the root- and footnode of its tree will be labeled NP, since an adjective adjoins to NP. We will refer to the root- and footnode of an adjunct auxiliary tree as its passive valency structure. Note that the tree for an adjective also specifies whether it adjoins from the left (footnode on right) or right (footnode on left). Predicative auxiliary trees are projected from verbs which subcategorize for clauses. Since a verb projects to a clausal category, and has a node labeled with a clausal category on its frontier (for the argument), the resulting tree can be interpreted as an auxiliary tree, which is useful in analyzing long- distance wh-movement (Frank, 2001).
To derive a finite-state transducer (FST) from a TAG, we do a depth-first traversal of each elementary tree (but excluding the passive valency structure, if present) to obtain a sequence of non- terminal nodes. For predicative auxiliary trees, we stop at the footnode. Each node becomes two states of the FST, one state representing the node on the downward traversal on the left side, the other representing the state on the upward traversal, on the right side. For leaf nodes, the two states are juxtaposed. The states are linearly con nected with -transitions, with the left node state of the root node the start state, and its right node state the final state (except for predicative auxiliary trees – see above). To each non-leaf state, we add one self loop transition for each tree in the grammar that can adjoin at that state from the specified direction (i.e., for a state representing a node on the downward traversal, the auxiliary tree must adjoin from the left), labeled with the tree name. For each pair of adjacent states representing a substitution node, we add transitions between them labeled with the names of the trees that can substitute there. We output the number of the grammatical function, and the argument semantics, if any is specified. For the lexical head, we transition on the head, and output the semantics if defined, or simply the lexeme otherwise. There are no other types of leaf nodes since we do not traverse the passive valency structure of adjunct auxiliary tees. At the beginning of each FST, an -transition outputs an open-bracket, and at the end, an -transition outputs a close-bracket. The result of this phase of the conversion is a set of FSTs, one per elementary tree of the grammar. We will refer to them as “elementary FSTs”.
